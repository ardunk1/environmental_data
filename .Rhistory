png(filename = here("Penguin_Flippers.png"), width = 800, height = 600)
par(mfrow = c(1,2))
hist(dat_adelie$flipper_length_mm,
main = "Adelie",
xlab = "Flipper Length (mm)")
hist(dat_chinstrap$flipper_length_mm,
main = "Chinstrap",
xlab = "Flipper Length (mm)")
dev.off
pen <- require(palmerpenguins)
t.test(subset(pengins, species == "Gentoo")$flipper_length_mm)
require(palmerpenguins)
t.test(subset(pengins, species == "Gentoo")$flipper_length_mm)
t.test(subset(pengiuns, species == "Gentoo")$flipper_length_mm)
t.test(subset(penguins, species == "Gentoo")$flipper_length_mm)
t.test(x = subset(penguins, species == "Gentoo")$flipper_length_mm, mu = 218)
t.test(x = subset(penguins, species == "Gengoo")$flipper_length_mm, mu = 218, alterative = "less")
t.test(x = subset(penguins, species == "Gentoo")$flipper_length_mm, mu = 218, alterative = "less")
t.test(x = subset(penguins, species == "Gentoo")$flipper_length_mm, mu = 218, alterative = "less") #H0 =
t.test(x = subset(penguins, species == "Gentoo")$flipper_length_mm, mu = 218, alternative = "less") #H0 =
t.test(flipper_length_mm~species, data = subset(penguins, species != "Chinstrap"))
par(mfrow = c(1,2))
hist(penguins$body_mass_g, breaks = 80, main = "histogram of body mass", xlab = "body mass (g)")
plot(density(penguins$body_mass_g, na=rm = TRUE), main = "density plot of body mass")
par(mfrow = c(1,2))
hist(penguins$body_mass_g, breaks = 80, main = "histogram of body mass", xlab = "body mass (g)")
plot(density(penguins$body_mass_g, na=rm = TRUE), main = "density plot of body mass")
par(mfrow = c(1,2))
hist(penguins$body_mass_g, breaks = 80, main = "histogram of body mass", xlab = "body mass (g)")
plot(density(penguins$body_mass_g, na=rm = TRUE), main = "density plot of body mass")
par(mfrow = c(1,2))
hist(penguins$body_mass_g, breaks = 80, main = "histogram of body mass", xlab = "body mass (g)")
plot(density(penguins$body_mass_g, na.rm = TRUE), main = "density plot of body mass")
######BOX PLOT##########
boxplot(body_mass_g ~ species, data = penguins)
dat_chinstrap <- subset(penguins, species == "Chinstrap")
mean(dat_chinstrap$body_mass_g, na.rm = TRUE)
shapiro.test(dat_chinstrap$body_mass_g)
aggregate(
body_mass_g ~species,
data = penguins,
FUN = function(x) shapiro.test(x)$p.value
)
aggregate(body_mass_g ~ species, data = penguins, FUN = mean)
aggregate(
body_mass_g ~species,
data = penguins,
FUN = function(x) shapiro.test(x)$p.value
)
###FIT LINEAR MODEL ####
fit_species = lm(body_mass_g ~ species, data = penguins)
summary(fit_species)
#####ANOVA####
anova(fit_species)
###One-Way ANOVA Complete Walkthrough##########
fit_species <- lm(body_mass_g ~ species, data = penguins)
summary(fig_species)
summary(fit_species)
anova(fit_species)
boxplot(body_mass_g ~ species, sex, data = penguins)
boxplot(body_mass_g ~ c(species, sex), data = penguins)
boxplot(body_mass_g ~ species & sex, data = penguins)
boxplot(body_mass_g ~ sex, data = penguins)
boxplot(body_mass_g ~ sex + species, data = penguins)
boxplot(body_mass_g ~ sex * species, data = penguins)
boxplot(body_mass_g ~ sex + species, data = penguins)
fit_additive = lm(body_mass_g ~ sex + species, data = penguins)
fit_interactive = lm(body_mass_g ~ sex*species, data = penguins)
summary(fit_interactive)
####Simple linear regression###
lm(bill_length_mm ~ body_mass_g, data = penguins)
boxplot(body_mass_g ~ sex * species, data = penguins)
boxplot(body_mass_g ~ sex * species, data = penguins, ylab = "Body Mass (g)", bty = 1)
boxplot(body_mass_g ~ sex * species, data = penguins, ylab = "Body Mass (g)", las = 1)
boxplot(body_mass_g ~ sex * species, data = penguins, ylab = "Body Mass (g)", las = 1, xlab = penguins$sex*penguins$species)
boxplot(body_mass_g ~ sex * species, data = penguins, ylab = "Body Mass (g)", las = 1, xlab = penguins$sex+penguins$species)
boxplot(body_mass_g ~ sex * species, data = penguins, ylab = "Body Mass (g)", las = 1, xlab = penguins$sex ~ penguins$species)
boxplot(body_mass_g ~ sex * species, data = penguins, ylab = "Body Mass (g)", las = 1)
boxplot(body_mass_g ~ sex * species, data = penguins, ylab = "Body Mass (g)", las = 1, main == NULL)
boxplot(body_mass_g ~ sex * species, data = penguins, ylab = "Body Mass (g)", las = 1, main = NULL)
help(names)
boxplot(body_mass_g ~ sex * species, data = penguins, ylab = "Body Mass (g)", las = 1, names=c("female", "male"))
boxplot(body_mass_g ~ sex * species, data = penguins, ylab = "Body Mass (g)", las = 1, names=c("female", "male", "female", "male", "female", "male"))
boxplot(body_mass_g ~ sex * species, data = penguins, ylab = "Body Mass (g)", las = 1, names=c("female /npenguin$species", "male", "female", "male", "female", "male"))
boxplot(body_mass_g ~ sex * species, data = penguins, ylab = "Body Mass (g)", las = 1, names=c("female \npenguin$species", "male", "female", "male", "female", "male"))
boxplot(body_mass_g ~ sex * species, data = penguins, ylab = "Body Mass (g)", las = 1, names=c("female \nAdelie", "male\nAdelie", "female\nChinstrap", "male\Chinstrap", "female\Gentoo", "male\Gentoo"))
boxplot(body_mass_g ~ sex * species, data = penguins, ylab = "Body Mass (g)", las = 1, names=c("female \nAdelie", "male\nAdelie", "female\nChinstrap", "male\nChinstrap", "female\nGentoo", "male\nGentoo"))
boxplot(body_mass_g ~ sex * species, data = penguins, ylab = "Body Mass (g)", las = 1, names=c("female \nAdelie", "male\nAdelie", "female\nChinstrap", "male\nChinstrap", "female\nGentoo", "male\nGentoo"), ldw = 2)
boxplot(body_mass_g ~ sex * species, data = penguins, ylab = "Body Mass (g)", las = 1, names=c("female \nAdelie", "male\nAdelie", "female\nChinstrap", "male\nChinstrap", "female\nGentoo", "male\nGentoo"), srt = 90)
boxplot(body_mass_g ~ sex * species, data = penguins, ylab = "Body Mass (g)", las = 1, srt = 180, names=c("female \nAdelie", "male\nAdelie", "female\nChinstrap", "male\nChinstrap", "female\nGentoo", "male\nGentoo"))
boxplot
help(boxplot)
boxplot(body_mass_g ~ sex * species, data = penguins, ylab = "Body Mass (g)", srt = 180, names=c("female \nAdelie", "male\nAdelie", "female\nChinstrap", "male\nChinstrap", "female\nGentoo", "male\nGentoo"))
boxplot(body_mass_g ~ sex * species, data = penguins, ylab = "Body Mass (g)", names=c("female \nAdelie", "male\nAdelie", "female\nChinstrap", "male\nChinstrap", "female\nGentoo", "male\nGentoo"))
boxplot(body_mass_g ~ sex * species, data = penguins, ylab = "Body Mass (g)", names=c("female \nAdelie", "male\nAdelie", "female\nChinstrap", "male\nChinstrap", "female\nGentoo", "male\nGentoo"), las = 4)
boxplot(body_mass_g ~ sex * species, data = penguins, ylab = "Body Mass (g)", las = 4, names=c("female \nAdelie", "male\nAdelie", "female\nChinstrap", "male\nChinstrap", "female\nGentoo", "male\nGentoo"))
boxplot(body_mass_g ~ sex * species, data = penguins, ylab = "Body Mass (g)", las = 1, names=c("female \nAdelie", "male\nAdelie", "female\nChinstrap", "male\nChinstrap", "female\nGentoo", "male\nGentoo"))
boxplot(body_mass_g ~ sex * species, data = penguins, ylab = "Body Mass (g)", las = 1, names=c("female \nAdelie", "male\nAdelie", "female\nChinstrap", "male\nChinstrap", "female\nGentoo", "male\nGentoo"), theme(axis.text.x = element_text(angle = 90, hjust = 1)))
boxplot(body_mass_g ~ sex * species, data = penguins, ylab = "Body Mass (g)", las = 1, names=c("female \nAdelie", "male\nAdelie", "female\nChinstrap", "male\nChinstrap", "female\nGentoo", "male\nGentoo"))
boxplot(body_mass_g ~ sex * species, data = penguins, ylab = "Body Mass (g)", names=c("female \nAdelie", "male\nAdelie", "female\nChinstrap", "male\nChinstrap", "female\nGentoo", "male\nGentoo"))
boxplot(body_mass_g ~ sex * species, data = penguins, ylab = "Body Mass (g)", xlab = "Penguin Species & Sex", las = 2, names=c("female \nAdelie", "male\nAdelie", "female\nChinstrap", "male\nChinstrap", "female\nGentoo", "male\nGentoo"))
boxplot(body_mass_g ~ sex * species, data = penguins, ylab = "Body Mass (g)", xlab = NULL, las = 2, names=c("female \nAdelie", "male\nAdelie", "female\nChinstrap", "male\nChinstrap", "female\nGentoo", "male\nGentoo"))
summary(fit_both)
fit_both <- lm(body_mass_g ~ sex*species, data = penguins)
summary(fit_both)
summary(fit_both)
3368.84+158.37
aggregate(sex ~ species, data = penguins, FUN = mean)
aggregate(body_mass_g ~ sex*species, data = penguins, FUN = mean)
require(here)
del <- read.csv(here("data", "delomys.csv"))
names(del) #get variable names
summary(del$body_mass)
summary(del$body_length)
shapiro.test(del$body_mass)
shapiro.test(del$body_length)
help(shapiro.test)
plot(x = del$body_mass, y = del$body_length, main = "Delomys Body Length by Mass", xlab = "Body Mass", ylab = "Body Length")
plot(x = del$body_mass, y = del$body_length, main = "Delomys Body Length by Mass", xlab = "Body Mass", ylab = "Body Length")
plot(x = del$body_mass, y = del$body_length, main = "Delomys Body Length by Mass", xlab = "Body Mass", ylab = "Body Length")
plot(x = del$body_mass, y = del$body_length, main = "Delomys Body Length by Mass", xlab = "Body Mass", ylab = "Body Length", pch = 20)
plot(x = del$body_mass, y = del$body_length, main = "Delomys Body Length by Mass", xlab = "Body Mass", ylab = "Body Length", pch = 2)
hist(del$body_mass)
hist(del$body_mass)
hist(del$body_mass, main = "Delomys Body Mass", xlab = "Body Mass", lty = 1)
hist(del$body_mass, main = "Delomys Body Mass", xlab = "Body Mass", lty = 2)
hist(del$body_mass, main = "Delomys Body Mass", xlab = "Body Mass", lty = 2, las = 1)
help(fig.asp)
help(fig.aspect)
xrang_bm <- c(min(del$body_mass), max(del$body_mass))
hist(del$body_mass, main = "Delomys Body Mass", xlim = xrang_bm, xlab = "Body Mass", lty = 2, las = 1)
xrang_bm <- c(min(del$body_mass), max(del$body_mass)+20)
hist(del$body_mass, main = "Delomys Body Mass", xlim = xrang_bm, xlab = "Body Mass", lty = 2, las = 1)
xrang_bm <- c(min(del$body_mass)-5, max(del$body_mass)+20)
hist(del$body_mass, main = "Delomys Body Mass", xlim = xrang_bm, xlab = "Body Mass", lty = 2, las = 1)
hist(del$body_length)
hist(del$body_length, main = "Delomys Body Length", xlab = "Body Length", las = 1)
xrang_bl <- c(min(del$body_length), max(del$body_length))
xrang_bm <- c(0, max(del$body_mass)+20)
hist(del$body_mass, main = "Delomys Body Mass", xlim = xrang_bm, xlab = "Body Mass", lty = 2, las = 1)
xrang_bl <- c(0, max(del$body_length+20))
hist(del$body_length, main = "Delomys Body Length", xlab = "Body Length", las = 1)
hist(del$body_length, main = "Delomys Body Length", xlab = "Body Length", xlim = xrang_bl, las = 1)
xrang_bl <- c(0, max(del$body_length+40))
hist(del$body_length, main = "Delomys Body Length", xlab = "Body Length", xlim = xrang_bl, las = 1)
boxplot(body_mass ~ as.factor(binomial), data = del)
boxplot(body_mass ~ as.factor(binomial), data = del, xlab = NULL, ylab = "Body Mass", las = 1, main = "Body Mass of Delomys. by Species")
boxplot(body_mass ~ as.factor(binomial), data = del, xlab = NULL, ylab = "Body Mass", las = 1, main = "Body Mass of Delomys by Species")
boxplot(body_mass ~ as.factor(sex), data = del)
boxplot(body_mass ~ as.factor(sex), data = del, xlab = NULL, ylab = "Body Mass", las = 1, main = "Body Mass of Delomys by Sex")
boxplot(body_mass ~ as.factor(binomial)*as.factor(sex), data = del)
boxplot(body_mass ~ as.factor(sex)*as.factor(binomial), data = del)
boxplot(body_mass ~ as.factor(sex)*as.factor(binomial), data = del, names = c("D. dorsalis \nfemale", "D. dorsalis\nmale", "D. sublineatus \nfemale", "D.sublineatus \nmale"))
boxplot(body_mass ~ as.factor(sex)*as.factor(binomial), data = del, xlab = NULL, names = c("D. dorsalis \nfemale", "D. dorsalis\nmale", "D. sublineatus \nfemale", "D.sublineatus \nmale"), las = 2)
par(mar = c(6,4,2,2))
boxplot(body_mass ~ as.factor(sex)*as.factor(binomial), data = del, xlab = NULL, names = c("D. dorsalis \nfemale", "D. dorsalis\nmale", "D. sublineatus \nfemale", "D.sublineatus \nmale"), las = 2)
par(mar = c(8,4,2,2))
boxplot(body_mass ~ as.factor(sex)*as.factor(binomial), data = del, xlab = NULL, ylab = "Body Mass", names = c("D. dorsalis \nfemale", "D. dorsalis\nmale", "D. sublineatus \nfemale", "D.sublineatus \nmale"), las = 2)
par(mar = c(8,4,2,2))
boxplot(body_mass ~ as.factor(sex)*as.factor(binomial), data = del, xlab = NULL, ylab = "Body Mass", names = c("D. dorsalis \nfemale", "D. dorsalis\nmale", "D. sublineatus \nfemale", "D.sublineatus \nmale"), las = 2)
par(mar = c(8,4,2,2))
boxplot(body_mass ~ as.factor(sex)*as.factor(binomial), data = del, xlab = NULL, ylab = "Body Mass", names = c("D. dorsalis \nfemale", "D. dorsalis\nmale", "D. sublineatus \nfemale", "D.sublineatus \nmale"), las = 2)
fit2 <- lm(body_mass ~ sex, data = del) #1-way ANOVA
summary(fit2)
fit1 <- lm(body_length ~ body_mass, data = del) #simple linear regression
fit2 <- lm(body_mass ~ sex, data = del) #1-way ANOVA
fit3 <- lm(body_mass ~ binomial, data = del) #1-way ANOVA
fit4 <- lm(body_mass ~ sex + binomial) #2-way additive ANOVA
fit1 <- lm(body_length ~ body_mass, data = del) #simple linear regression
fit2 <- lm(body_mass ~ sex, data = del) #1-way ANOVA
fit3 <- lm(body_mass ~ binomial, data = del) #1-way ANOVA
fit4 <- lm(body_mass ~ sex + binomial, data = del) #2-way additive ANOVA
fit5 <- lm(bod_mass ~ sex*binomial, data = del) #2-say factorial ANOVA
fit1 <- lm(body_length ~ body_mass, data = del) #simple linear regression
fit2 <- lm(body_mass ~ sex, data = del) #1-way ANOVA
fit3 <- lm(body_mass ~ binomial, data = del) #1-way ANOVA
fit4 <- lm(body_mass ~ sex + binomial, data = del) #2-way additive ANOVA
fit5 <- lm(body_mass ~ sex*binomial, data = del) #2-say factorial ANOVA
hist(residuals(fit1))
hist(residuals(fit1), xlab = "Residuals", main = "Fit 1")
par(mfrow = c(1,5))
hist(residuals(fit1), xlab = "Residuals", main = "Fit 1")
par(mfrow = c(1,5))
hist(residuals(fit1), xlab = "Residuals", main = "Fit 1")
hist(residuals(fit2), xlab = "Residuals", main = "Fit 2")
hist(residuals(fit3), xlab = "Residuals", main = "Fit 3")
hist(residuals(fit4), xlab = "Residuals", main = "Fit 4")
hist(residuals(fit5), xlab = "Residuals", main = "Fit 5")
par(mfrow = c(1,5))
hist(residuals(fit1), xlab = "Residuals", main = "Fit 1")
hist(residuals(fit2), xlab = "Residuals", main = "Fit 2")
hist(residuals(fit3), xlab = "Residuals", main = "Fit 3")
hist(residuals(fit4), xlab = "Residuals", main = "Fit 4")
hist(residuals(fit5), xlab = "Residuals", main = "Fit 5")
par(mfrow = c(2,3))
hist(residuals(fit1), xlab = "Residuals", main = "Fit 1")
hist(residuals(fit2), xlab = "Residuals", main = "Fit 2")
hist(residuals(fit3), xlab = "Residuals", main = "Fit 3")
hist(residuals(fit4), xlab = "Residuals", main = "Fit 4")
hist(residuals(fit5), xlab = "Residuals", main = "Fit 5")
summary(fit2)
summary(fit3)
summary(fit4)
summary(fit5)
fit4 <- lm(body_mass ~ as.factor(sex) + as.factor(binomial), data = del) #2-way additive ANOVA
summary(fit4)
shapiro.test(fit1)
shapiro.test(residuals(fit1)
)
shapiro.test(residuals(fit2))
shapiro.test(residuals(fit3))
shapiro.test(residuals(fit4))
shapiro.test(residuals(fit5))
knitr::kable(coef(summary(fit1)))
knitr::kable(coef(summary(fit1)), digits = 2)
knitr::kable(coef(summary(fit1)), digits = 2)
knitr::kable(anova(fit2), digits = 2)
knitr::kable(anova(fit3), digits = 2)
knitr::kable(anova(fit4), digits = 2)
knitr::kable(anova(fit5), digits = 2)
knitr::kable(coef(summary(fit1)), digits = 2, main = Fit1)
knitr::kable(coef(summary(fit1)), digits = 2, main = "Fit1")
(0.88*100) + 76.12
unique(del_binomial)
unique(del$binomial)
knitr::kable(anova(fit2), digits = 2)
knitr::kable(anova(fit2), digits = 4)
knitr::kable(anova(fit3), digits = 4)
knitr::kable(anova(fit4), digits = 4)
knitr::kable(anova(fit5), digits = 4)
AIC(fit1)
mod_select <- c(AIC(fit2), AIC(fit3), AIC(fit4), AIC(fit5))
names(mod_select) <- c("fit2", "fit3", "fit4", "fit5")
mod_select
min(mod_select)
help(library)
library(here)
require(palmerpenguins)
here
here()
read.csv(here("data" "ginkgo_data_2021.csv"))
read.csv(here("data", "ginkgo_data_2021.csv"))
ginkgo <- read.csv(here("data", "ginkgo_data_2021.csv"))
ls()
lapply(ginkgo)
sapply(ginkgo)
sapply(ginkgo, class)
class(ginkgo)
help(length)
length(x) <- 15 #create a vector named "x" that is 15 objects long
x <- c(1:15)
x
length(x)
length(x) <- 10
x
length(x) <- 15
x
y <- c("yes", "no", "maybe", "probably", "sure")
length(y)
length(y[1])
length(y(1))
matrix()
help(matrix)
m <- matrix(1:3)
m
m <- matrix(2:3)
m
m <- matrix(2:3,5:6)
m
m <- matrix[(2:3,5:6)]2,6]
m <- matrix[2, 6]
c1 <- c(1:10)
c2 <- c(11:20)
m <- matrix(c1, c2)
m
m <- matrix(c(c1, c2))
m
m <- matrix(c(c1), c(c2))
m
m1 <- matrix(1:10, nrow = 2)
m1
m0 <- matrix(1:10, nrow = 2, ncol = 5)
m0
m2 <- matrix(1:11, nrow = 2)
m2
m3 <- matrix(c(c1), c(c2), ncol = 2)
m3
View(m2)
m0 #notice - R populated the values 1-10 across the row.
m2 <- matrix(1:10, nrow = 2, byrow=TRUE)
m2
m3 <- matrix(c(c1, c2), ncol = 2)
m4 <- matrix(c(c1, c2), ncol = 2)
m4
dim(m4) #check the dimensions of m4
df0 <- data.frame(1:12, nrow = 4)
df0
df0 <- data.frame(c1, c2)
df0
c3 <- c("one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten")
df0 <- data.frame(c1, c2, c3)
df0
df0 <- names("first", "second", "third")
df0 <- name("first", "second", "third")
df0 #notice - the coumn names correspond to the variable names
df1 <- data.frame(first = c1, second = c2)
df1
class(ginkgo)
nrow(ginkgo)
ncol(ginkgo)
dim(ginkgo) #What are the dimensions of ginkgo?
names(ginkgo) #return the column names in the dataframe ginkgo
var1 <- ginkgo$site_id
var1
dim(var1)
length(var1)
class(var1)
first_row <- ginkgo[1 ,]
first_row
#Let's check out the first few rows of the ginkgo data:
head(ginkgo)
first_row2 <- ginkgo[1,1:6]
first_row == first_row2
single <- ginkgo[2,3]
single
#Let's check out the first few rows of the ginkgo data:
head(ginkgo)
third_col <- ginkgo[ ,3] # Select all rows of data, but only the third column
name(third_col)
names(third_col)
type(third_col)
sapply(third_col, name)
sapply(third_col, names)
head(third_col)
View(ginkgo)
length(third_col)
help(subset())
help(subset)
names(penguins)
unique(penguins$species)
Adelie <- subset(penguins$species == "Adelie")
Adelie <- subset(species == "Adelie", data = penguins)
Adelie <- subset(penguins$species == "Adelie")
Adelie <- subset(penguins, species == "Adelie")
View(Adelie)
length(names(penguins)) #check the names of the variables in the dataset
summary(ginko)
help("summary)
)
""
"
help(summary)
summary(ginkgo)
summary(c1)
mod1 <- lm(max_width ~ seeds_present, data = ginkgo)
summary(mod1)
mean(ginkgo$seeds_present)
mean(penguins$species)
mean(ginkgo$notch_depth)
mean(ginkgo$notch_depth, na.rm = TRUE)
class(ginkgo$seeds_present)
mean(ginkgo$seeds_present)
class(ginkgo$notch_depth)
mean(ginkgo)
class(ginkgo$max_width) #numeric
mean(ginkgo$max_width, na.rm = TRUE)
mean(ginkgo[ ,2:3])
names(ginkgo[ 2,3])
names(ginkgo[ ,2:3])
mean(ginkgo[ ,2:3])
mean()
help(mean)
mean(ginkgo$seeds_present, digits = 2)
mean(ginkgo$seeds_present, round = 2)
round(mean(ginkgo$seeds_present), 2)
help(sd)
sd(ginkgo$petiole_length)
sd(ginkgo$petiole_length)
sd(ginkgo$petiole_length, na.rm = TRUE)
plot(ginkgo$max_depth, ginkgo$max_width)
plot(max_depth, max_width, data = ginkgo)
plot(ginkgo$max_depth, #x values
ginkgo$max_width, #y values
col = "blue", # change the color of the points (R has hundreds of colors to choose from)
pch = 17, #pch changes the point symbol (R has 20 options that are specified using integers 1-20)
)
plot(ginkgo$max_depth, #x values
ginkgo$max_width, #y values
col = "blue", # change the color of the points (R has hundreds of colors to choose from)
pch = 17, #pch changes the point symbol (R has 20 options that are specified using integers 1-20)
cex = 1.25 #cex sets the symbol size (R defaults to 1)
)
plot(ginkgo$max_depth, #x values
ginkgo$max_width, #y values
col = "blue", # change the color of the points (R has hundreds of colors to choose from)
pch = 17, #pch changes the point symbol (R has 20 options that are specified using integers 1-20)
cex = 3 #cex sets the symbol size (R defaults to 1)
)
plot(ginkgo$max_depth, #x values
ginkgo$max_width, #y values
col = "blue", # change the color of the points (R has hundreds of colors to choose from)
pch = 17, #pch changes the point symbol (R has 20 options that are specified using integers 1-20)
cex = 0.5 #cex sets the symbol size (R defaults to 1)
)
plot(ginkgo$max_depth, #x values
ginkgo$max_width, #y values
col = "blue", # change the color of the points (R has hundreds of colors to choose from)
pch = 17, #pch changes the point symbol (R has 20 options that are specified using integers 1-20)
cex = 0.5, #cex sets the symbol size (R defaults to 1)
main = "Ginkgo Leaves Maximum Width by Depth", # produces a graph title
xlab = "Max Depth (mm)", #Produces x axis label
xlim = 150, #Sets the maximum limit of the X axis
ylab = "Max Width (mm)", #Produces y axis label
ylim = c(0:150) #sets the limits of the y axis
)
plot(ginkgo$max_depth, #x values
ginkgo$max_width, #y values
col = "blue", # change the color of the points (R has hundreds of colors to choose from)
pch = 17, #pch changes the point symbol (R has 20 options that are specified using integers 1-20)
cex = 0.5, #cex sets the symbol size (R defaults to 1)
main = "Ginkgo Leaves Maximum Width by Depth", # produces a graph title
xlab = "Max Depth (mm)", #Produces x axis label
xlim = c(0, 150), #Sets the maximum limit of the X axis
ylab = "Max Width (mm)", #Produces y axis label
ylim = c(0, 150) #sets the limits of the y axis
)
plot(ginkgo$max_depth, ginkgo$seeds_present)
hist(penguins$flipper_length_mm)
hist(penguins$flipper_length_mm, breaks = 15)
help(hist)
hist(penguins$flipper_length_mm, breaks = 26)
hist(penguins$flipper_length_mm, xlim = c(160, 240), breaks = 8)
hist(penguins$flipper_length_mm, breaks = 20) #Separates the data into 26 bins each of which includes a range of 2.5 mm
hist(penguins$flipper_length_mm, xlim = c(160, 240), breaks = 26) #forces the x-axis to go from 160 to 240; now we can specify any number of breaks we want
hist(penguins$flipper_length_mm, breaks = 25) #Here, we've told R to separate the data into 25 bins; however, R selected 26 so that the break points are 2.5 instead of a less even size.
hist(penguins$flipper_length_mm, breaks = c(170, 180, 190, 200, 210, 220, 230, 240)
)
FUN1 <- function(x1){
x1 <- c(min(x1), max(x1))
x1 <- round(x1/10, 2)
}
hist(penguins$flipper_length_mm, breaks = FUN1)
hist(penguins$flipper_length_mm, breaks = FUN1(penguins$flipper_length_mm))
x1 <- c(min(x1), max(x1))
min(penguins$flipper_length_mm)
min(penguins$flipper_length_mm, na.rm = TRUE)
hist(penguins$flipper_length_mm, breaks = FUN1(penguins$flipper_length_mm))
x1 <- round((x1/10), 2)
max(penguins$flipper_length_mm)
x1 <- c(min(x1, na.rm = TRUE), max(x1, na.rm = TRUE))
max(penguins$flipper_length_mm, na.rm = TRUE)
hist(penguins$flipper_length_mm, breaks = FUN1(penguins$flipper_length_mm))
FUN1 <- function(penguins$flipper_length_mm){
FUN1(penguins$flipper_length_mm)
FUN1 <- function(x1){
x <- min(x1, na.rm = TRUE)
y <- max(x1, na.rm = TRUE)
rang <- (x+y)/10
}
FUN1(penguins$flipper_length_mm)
hist(penguins$flipper_length_mm, breaks = FUN1(penguins$flipper_length_mm))
sourse(FUN1.R)
source(FUN1.R)
hist(penguins$flipper_length_mm, breaks = FUN1(penguins$flipper_length_mm))
FUN1 <- function(x1){
mini <- min(x1, na.rm = TRUE)
maxi <- max(x1, na.rm = TRUE)
rang <- (x+y)/10
return(rang)
}
hist(penguins$flipper_length_mm, breaks = FUN1(penguins$flipper_length_mm))
FUN1 <- function(x1){
mini <- min(x1, na.rm = TRUE)
maxi <- max(x1, na.rm = TRUE)
rang <- (mini + maxi)/10
return(rang)
}
hist(penguins$flipper_length_mm, breaks = FUN1(penguins$flipper_length_mm))
mini <- min(x1, na.rm = TRUE)
mi <- min(penguins$flipper_length_mm, na.rm = TRUE)
ma <- max(penguins$flipper_length_mm, na.rm = TRUE)
ra <- (mi + ma)/10
hist(penguins$flipper_length_mm, breaks = FUN1(penguins$flipper_length_mm))
hist(penguins$flipper_length_mm, breaks = FUN1(penguins$flipper_length_mm), main = "I did it!")
hist(penguins$flipper_length_mm, breaks = 200) #Here, we've told R to separate the data into 25 bins; however, R selected 26 so that the break points are 2.5 instead of a less even size. (breaks = is really just a suggestion)
mi <- min(penguins$flipper_length_mm, na.rm = TRUE)
ma <- max(penguins$flipper_length_mm, na.rm = TRUE)
ra <- (mi + ma)
hist(penguins$flipper_length_mm, breaks = FUN1(penguins$flipper_length_mm), main = "I did it!")
FUN1 <- function(x1){
mini <- min(x1, na.rm = TRUE)
maxi <- max(x1, na.rm = TRUE)
rang <- (mini + maxi)
return(rang)
}
hist(penguins$flipper_length_mm, breaks = FUN1(penguins$flipper_length_mm), main = "I did it!")
hist(penguins$flipper_length_mm, breaks = FUN1(penguins$flipper_length_mm), main = "I did it!")
FUN1 <- function(x1){
mini <- min(x1, na.rm = TRUE)
maxi <- max(x1, na.rm = TRUE)
rang <- (mini + maxi)/2
return(rang)
}
hist(penguins$flipper_length_mm, breaks = FUN1(penguins$flipper_length_mm), main = "I did it!")
ra <- c(min(penguins$flipper_length_mm, na.rm = TRUE), max(penguins$flipper_length_mm, na.rm = TRUE))
172+231/2
hist(penguins$flipper_length_mm, breaks = 25) #Here, we've told R to separate the data into 25 bins; however, R selected 26 so that the break points are 2.5 instead of a less even size. (breaks = is really just a suggestion)
hist(penguins$flipper_length_mm, breaks = FUN1(penguins$flipper_length_mm), main = "I did it!")
boxplot(ginkgo$petiole_length)
boxplot(ginkgo$petiole_length, main = "Ginkgo Petiole Length")
boxplot(petiole_length ~ seeds_present, data = penguins)
boxplot(petiole_length ~ seeds_present, data = ginkgo)
